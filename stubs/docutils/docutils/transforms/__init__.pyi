from collections.abc import Callable, Iterable
from types import ModuleType
from typing import Any

from docutils import ApplicationError, Component, TransformSpec, nodes
from docutils.nodes import Node, pending

class TransformError(ApplicationError): ...

class Transform:
    default_priority: int | None
    document: nodes.document
    startnode: Node | None
    language: ModuleType
    def __init__(self, document: nodes.document, startnode: Node | None = None) -> None: ...
    def apply(self, **kwargs: Any) -> None: ...

class Transformer(TransformSpec):
    transforms: list[tuple[str, type[Transform], Node | None]] = ...
    unknown_reference_resolvers: list[Callable[[Node], bool]] = ...
    document: nodes.document = ...
    applied: list[tuple[int, type[Transform], pending, Any]] = ...
    sorted: int = ...
    components: dict[str, Component] = ...
    serialno: int = ...
    def __init__(self, document: nodes.document) -> None: ...
    def add_transform(self, transform_class: type[Transform], priority: int | None = None, **kwargs) -> None: ...
    def add_transforms(self, transform_list: list[type[Transform]]) -> None: ...
    def add_pending(self, pending: pending, priority: int | None = None) -> None: ...
    def get_priority_string(self, priority: int) -> str: ...
    def populate_from_components(self, components: Iterable[Component]) -> None: ...
    def apply_transforms(self) -> None: ...
